{"version":3,"sources":["registerServiceWorker.js","components/Seabox.js","components/Card.js","components/Cardp.js","components/Scroll.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Seabox","searchfield","searchChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","Cardp","arr","map","user","i","key","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","fetch","response","json","users","filteredarr","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2OAUMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,6CC9DlDC,EANA,SAAC,GAAkC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC5B,OAAQ,yBAAKC,UAAU,OACnB,2BAAOA,UAAU,oCAAoCC,KAAK,SAASC,YAAY,yBAAwBC,SAAUJ,MCkB1GK,EApBF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAGnB,OAGI,yBAAKP,UAAW,+HACZ,yBAAKQ,IAAG,+BAA0BH,GAAMI,IAAI,UAC5C,6BACR,4BAAKH,GACL,2BAAIC,MCWOG,EApBD,SAAC,GAAU,IAATC,EAAQ,EAARA,IAEZ,OAEI,6BAGIA,EAAIC,KAAI,SAACC,EAAOC,GACZ,OAEL,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIM,EAAIG,GAAGT,GAAIC,KAAMK,EAAIG,GAAGR,KAAMC,MAAOI,EAAIG,GAAGP,aCA1DS,G,YAVA,SAACC,GAEZ,OACH,yBAAMC,MAAO,CAAEC,SAAU,SAASC,OAAQ,kBAAoBC,OAAQ,UACjEJ,EAAMK,YC4CGC,E,YAzCX,aAAc,IAAD,8BACT,+CAWRC,eAAiB,SAACC,GACd,EAAKC,SAAU,CAAE5B,YAAa2B,EAAME,OAAOC,SAXvC,EAAKrC,MAAQ,CACToB,IAAK,GACLb,YAAa,IAJR,E,iFAOQ,IAAD,OAChB+B,MAAM,8CACH5C,MAAK,SAAA6C,GAAQ,OAAGA,EAASC,UACzB9C,MAAK,SAAA+C,GAAU,EAAKN,SAAS,CAAEf,IAAKqB,S,+BAMjC,IAAD,OACCC,EAAcC,KAAK3C,MAAMoB,IAAIwB,QAAO,SAAAxB,GACtC,OAAOA,EAAIL,KAAK8B,cAAcC,SAAS,EAAK9C,MAAMO,YAAYsC,kBAGlE,OAA2B,IAAxBF,KAAK3C,MAAMoB,IAAI2B,OACV,wBAAItC,UAAU,QAAd,WAIA,yBAAKA,UAAU,MACX,iDACC,kBAAC,EAAD,CAAQD,aAAcmC,KAAKV,iBAE5B,kBAAC,EAAD,KACC,kBAAE,EAAF,CAAQb,IAAKsB,U,GAhChBM,aCClBC,IAASC,OACD,kBAAC,EAAD,MACNC,SAASC,eAAe,SNQX,WACb,GAA6C,kBAAmB7D,UAAW,CAGzE,GADkB,IAAI8D,IAAIC,SAAwBrE,OAAOC,UAC3CqE,SAAWtE,OAAOC,SAASqE,OAIvC,OAGFtE,OAAOuE,iBAAiB,QAAQ,WAC9B,IAAMlE,EAAK,UAAMgE,SAAN,sBAEPvE,EAwCV,SAAiCO,GAE/BgD,MAAMhD,GACHI,MAAK,SAAA6C,GAGkB,MAApBA,EAASkB,SACuD,IAAhElB,EAASmB,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrE,UAAUC,cAAcqE,MAAMnE,MAAK,SAAAC,GACjCA,EAAamE,aAAapE,MAAK,WAC7BT,OAAOC,SAAS6E,eAKpB1E,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEA5DA6D,CAAwB1E,GAGxBD,EAAgBC,OMtBxB2E,K","file":"static/js/main.a8643c56.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Seabox = ( { searchfield, searchChange}) => {\r\n    return (<div className='pa2'>\r\n        <input className='pa2 br2 b--black bg-lightest-blue' type='search' placeholder='Search mugy friends :)'onChange={searchChange} />\r\n    </div>);\r\n}\r\n\r\nexport default Seabox;\r\n","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n\r\n\r\n    return(\r\n\r\n\r\n        <div className= ' tc bg- linear-gradient(299deg, #21D4FD 0%, #B721FF 64% dib   ma2 pa1 br4 bg-animate hover-bg-blue  b--black ba bw1   grow '>\r\n            <img src={`https://robohash.org/${id}`} alt=\"asdas\"/>\r\n            <div>\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardp = ({arr}) =>{\r\n\r\n    return(\r\n        \r\n        <div>\r\n            \r\n            {\r\n            arr.map((user , i) => {\r\n                return(\r\n\r\n           <Card key={i} id={arr[i].id} name={arr[i].name} email={arr[i].email} />\r\n                );\r\n            })\r\n      \r\n}\r\n  </div>      \r\n    \r\n    );\r\n\r\n}\r\nexport default Cardp;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) =>{\r\n\r\n    return(\r\n <div  style={{ overflow: 'scroll',border: '5px solid black',  height: '530px'}}>\r\n     {props.children}\r\n </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nimport Seabox from '../components/Seabox';\r\nimport Cardp from '../components/Cardp';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            arr: [],\r\n            searchfield: '' \r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users => {this.setState({ arr: users})});\r\n      }\r\nonSearchChange = (event) => {\r\n    this.setState( { searchfield: event.target.value})\r\n}\r\n\r\n    render() {\r\n        const filteredarr = this.state.arr.filter(arr =>{ \r\n            return arr.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n     \r\n        })\r\n        if(this.state.arr.length===0){\r\n         return <h1 className=' tc ' >Loading</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div className='tc'> \r\n                    <h1>Robofriends of MB</h1>\r\n                     <Seabox searchChange={this.onSearchChange}/>\r\n                \r\n                    <Scroll>\r\n                     < Cardp arr={filteredarr}/>      \r\n                </Scroll>\r\n                </div>\r\n                );\r\n        }\r\n\r\n\r\n    \r\n}\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'; \r\n\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(\r\n        <App/>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nregisterServiceWorker();"],"sourceRoot":""}